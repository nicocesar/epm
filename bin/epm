#!/usr/bin/env ruby

require File.join(File.dirname(__FILE__), '..', 'lib', 'epm.rb')
require 'commander/import'

program :version, EPM.version
program :description, 'Ethereum Package Manager assists in the management of Ethereum Packages and Tools to ease developers workflows.'

##
## Package Workflow Commands
##
command :compile do |c|
  c.syntax = 'epm compile [Contract File]'
  # summary is displayed on --help
  c.summary = 'Compile an ethereum contract and return the byte code array.'
  # description is deplayed on subcommand --help
  c.description = 'Compile an ethereum contract and return the byte code array. Compile does not send to the blockchain, it only returns the byte code array.'
  c.action do |args|
    result = EPM.compile(args)
    result.each{|l| print l + "\n"}
  end
end

command :create do |c|
  c.syntax = 'epm create [Contract File]'
  # summary is displayed on --help
  c.summary = 'Compile an ethereum contract and deploy to the blockchain.'
  # description is deplayed on subcommand --help
  c.description = 'Compile an ethereum contract and deploy to the blockchain. Create is used only for single contracts rather than packages of contracts. Use epm deploy to send packages of contracts to the blockchain.'
  c.action do |args|
    result = EPM.create(args)
    result.each{|l| print l + "\n"}
  end
end

command :deploy do |c|
  c.syntax = 'epm deploy [Package Definition File from Local or Remote]'
  # summary is displayed on --help
  c.summary = 'Compile and deploy a system of contracts to the blockchain.'
  # description is deplayed on subcommand --help
  c.description = 'Compile and deploy a system of contracts to the blockchain. It is a wrapper for the remainder of the EPM functionality which works in an automated way to deploy as many contracts and send as many transactions as the developer needs to set up a system of contracts. Deploy will work either with local package-definition files or with package-definition files located on any remote git server which the user has access to. See gem README for EPM package-definition file syntax.'
  c.action do |args|
    EPM.deploy(args)
  end
end

##
## EPM Tools
##
command :transact do |c|
  c.syntax = 'epm transact [Recipient] [Data]'
  # summary is displayed on --help
  c.summary = 'Send a transaction to a contract.'
  # description is deplayed on subcommand --help
  c.description = 'Send a transaction to a contract. By definition this will be a 0 value call. The account sending the transaction will need ether, but only to provide the gas for the individual call. The first argument sent to the command line will be the recipient and the remaining arguments sent to the command line will be the data with each of the data slots separated by a space on the command line (or a new element in the array if calling programmatically). Arguments which are prefixed by `0x` will be treated as hex values and arguments which are not will be treated as strings. EPM will compile all of the arguments into a single RPC call which is correctly formated for all of the clients.'
  c.action do |args|
    EPM.transact(args)
    print "Transaction Sent.\n"
  end
end

command :query do |c|
  c.syntax = 'epm query [Contract Address] [Storage Location]'
  # summary is displayed on --help
  c.summary = 'Query a storage position of a contract currently on the blockchain.'
  # description is deplayed on subcommand --help
  c.description = 'Query a storage position of a contract currently on the blockchain. Accepts two arguments, the first argument is the contract to be queried, and the second argument is the storage location to be queried.'
  c.action do |args|
    print EPM.query(args) + "\n"
  end
end

command :rpc do |c|
  c.syntax = 'epm rpc [method] [...args...]'
  c.description = 'Connect to eth and send any RPC command.'
  c.option '--a ADDRESS', String, 'Some address.'
  c.option '--x VALUE', String, 'Some value.'
  c.option '--s STRING', String, 'Some string, for lll, lll code.'
  c.option '--aDest ADDRESS', String, 'Destination address.'
  c.option '--bData HEX', String, 'Hex data.'
  c.option '--sec HEX', String, 'Private key. (yikes! chill, its testnet)'
  c.option '--xGas VALUE', String, 'Gas budget.'
  c.option '--xGasPrice VALUE', String, 'Gas price offered.'
  c.option '--xValue VALUE', String, 'ethers along with transaction.'
  c.option '--bCode HEX', String, 'Binary code as hex value.'
  c.option '--xEndowment VALUE', String, 'Ethers to give a created contract.'
  c.action do |args, opts|
    print "#{EPM.rpc args, opts}\n"
  end
end

command :start do |c|
  c.syntax = 'epm start'
  c.description = 'Start your default ethereum server.'
  c.action do
    print "Please be patient, this will take a few seconds.\n"
    EPM.start
    print "Server has started.\n"
  end
end

command :stop do |c|
  c.syntax = 'epm stop'
  c.description = 'Stop your default ethereum server.'
  c.action do
    EPM.stop
    print "Server has stopped.\n"
  end
end

command :restart do |c|
  c.syntax = 'epm restart'
  c.description = 'Restart your default ethereum server.'
  c.action do
    print "Please be patient, this will take a few seconds.\n"
    EPM.restart
    print "Server has been restarted.\n"
  end
end
